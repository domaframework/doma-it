apply plugin: 'eclipse'
 
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { it.kind == "con" }
            }
            withXml {
                def node = it.asNode()
                node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'])
                node.appendNode( 'classpathentry', [ kind: 'src', output: 'bin/main', path: '.apt_generated'])
            }
        }
    }
}
 
eclipseJdt {
    doLast { 
        file('.settings/org.eclipse.jdt.apt.core.prefs').withWriter { writer ->
            def contents = """\
                |eclipse.preferences.version=1
                |org.eclipse.jdt.apt.aptEnabled=true
                |org.eclipse.jdt.apt.genSrcDir=.apt_generated
                |org.eclipse.jdt.apt.reconcileEnabled=true
                |"""
            writer << contents.stripMargin()
        }
        file('.settings/org.eclipse.jdt.core.prefs').withWriter { writer ->
            writer << file('eclipse/org.eclipse.jdt.core.prefs').text
        }
        file('.settings/org.eclipse.jdt.ui.prefs').withWriter { writer ->
            writer << file('eclipse/org.eclipse.jdt.ui.prefs').text
        }
        file('.factorypath').withWriter { writer ->
            def domaJar = configurations.annotationProcessor.find {
                it.name.startsWith('doma-2')
            }
            new groovy.xml.MarkupBuilder(writer).factorypath() {
                factorypathentry(kind:'EXTJAR', id:domaJar, enabled:true, runInBatchMode:false)
            }
        }
    }
}

task cleanEclipseJdtSettings(type: Delete) {
  delete file('.settings/org.eclipse.jdt.apt.core.prefs')
  delete file('.settings/org.eclipse.jdt.ui.prefs')
  delete file('.settings/org.eclipse.jdt.core.prefs')
}

tasks["cleanEclipse"].dependsOn(cleanEclipseJdtSettings)
